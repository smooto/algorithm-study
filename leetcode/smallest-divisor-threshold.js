/*
https://leetcode.com/explore/challenge/card/november-leetcoding-challenge/564/week-1-november-1st-november-7th/3521/

Given an array of integers nums and an integer threshold, we will choose a positive integer divisor and divide all the array by it and sum the result of the division. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.

Each result of division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).

It is guaranteed that there will be an answer.

Example 1:

Input: nums = [1,2,5,9], threshold = 6
Output: 5
Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. 
If the divisor is 4 we can get a sum to 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). 

Example 2:

Input: nums = [2,3,5,7,11], threshold = 11
Output: 3

Example 3:

Input: nums = [19], threshold = 5
Output: 4
 

Constraints:

1 <= nums.length <= 5 * 10^4
1 <= nums[i] <= 10^6
nums.length <= threshold <= 10^6
*/

// start at divisor = 1, find raw outcome
// compare outcome to threshold
// increase divisor by Math.ceil(outcome/threshold)
// repeat, adjust as needed

// if we start with largest number as divisor, outcome will equal nums.length
// if we start with median number as divisor...
  // median and all smaller numbers will evaluate to 1, therefore their sum will be the number of elements up to that point
  // larger numbers will evaluate to >1

function smallestDivisor(nums, threshold) {
  const sortedNums = nums.sort();

  let i = Math.floor(nums.length/2);
  let divisor = sortedNums[i];
  let runningSum = i;

  let result = threshold + 1;

  while(result > threshold) {
    for(num in sortedNums) {
      runningSum += Math.floor(num/divisor);
    }

    result = runningSum;
    
    i++;
    divisor = sortedNums[i];
    runningSum = i;
  }

  return divisor;
}

// function smallestDivisor(nums, threshold) {
//   const sortedNums = nums.sort();

//   let divisor = Math.min(...sortedNums);
//   let outcome = 0;

//   while(outcome > threshold) {
//     outcome = sortedNums.reduce((sum, num) => {
//       sum += Math.ceil(num/divisor);
//       return sum;
//     }, 0)

//     if(outcome > threshold) divisor++;
//   }

//   return divisor;
// }

const bigArray = [749600,949195,16236,218758,919324,360893,269371,580831,309551,103751,994999,744256,45425,231465,145201,380408,63702,336244,498709,70650,941993,686903,185029,763951,31423,248691,911780,658331,382499,576447,575574,233308,754652,627985,155624,787611,992378,748176,775233,312210,335227,476292,643975,319727,397359,444241,281606,772751,566700,355620,509485,79558,573679,133243,964229,627236,866569,904776,411175,407850,421205,439818,347240,124451,299480,873961,620236,941589,753222,936431,698516,236740,242831,507355,76930,328288,86070,120006,787451,646321,905336,31160,843601,340269,193988,877004,408832,407948,128175,370008,435455,864908,758922,877097,112551,14196,572686,493270,95040,584790,832942,309270,452699,258380,525485,307769,723811,228656,235620,400804,832917,209,641989,266417,77445,143709,124614,976554,747968,181184,239015,133833,738085,810617,351029,215695,641988,585220,429769,780294,194319,466023,638876,789431,875104,554481,142118,466813,325029,823036,204823,761528,913517,936942,874728,716786,513836,595831,637730,471018,42071,179868,267001,250020,814582,944085,174804,964848,652564,455495,956547,710495,984117,998205,9018,333764,479010,357343,276596,869775,514538,988802,889935,83425,926514,95590,848446,290590,649743,321466,861420,949427,250500,126272,258013,894363,457400,73680,564766,882068,94297,581524,371082,438465,808242,724976,893790,763986,905028,631716,672721,870062,664838,833596,905904,350112,401868,545046,75212,33967,628880,108087,539010,932785,341734,788674,275904,700615,416198,388094,435529,56167,964146,886169,744079,216121,939329,974043,105092,969987,111731,797234,910577,574306,362202,319231,947829,259963,179117,494421,610108,353588,932836,154740,598769,207448,591677,99631,11366,50145,65889,666373,370529,250928,775307,442033,335798,675677,721303,543352,878273,252049,632007,691597,562799,914973,823334,962801,904854,18970,489708,731631,955601,934088,692041,867828,842616,574747,259770,165024,460912,789152,452452,837038,692178,128872,52744,812926,807712,42537,790776,153649,610421,959277,458929,938344,986637,912527,567179,511622,880293,982398,920518,963108,813188,110174,373598,113215,55847,687904,918165,244506,226273,993496,309777,516803,371338,794515,662487,214285,88101,630291,148511,352984,273221,386537,646971,57500,535243,48531,118646,308194,875512,13461,750435,426642,113094,405016,763272,656409,735616,684900,281060,758494,609924,699157,260746,202119,423227,382209,429817,583917,60375,596476,279222,460814,412187,981993,924567,831778,679882,796356,668215,198851,412486,826493,591825,50260,743567,476251,520092,658329,346674,686820,181258,844665,141767,576719,977276,373826,495147,127560,869330,808543,22105,564140,860393,417496,556261,165939,391237,24603,685635,660190,655265,4795,719609,752032,230181,224780,230794,505622,959159,596968,763311,251387,295122,10199,97387,420403,878934,946912,648279,910563,39251,400040,643243,886882,150194,592297,34184,913489,867684,747172,512284,228410,366865,779880,856358,646965,693543,805979,217635,236496,935296,468693,734958,176174,551488,63429,951884,23489,134602,981512,833625,992623,439151,810719,89105,260609,367758,99635,879623,497979,697124,283279,428377,437506,898423,938234,353842,963980,861039,847356,929438,114567,539308,415876,382609,173990,699585,223616,473068,513151,475708,736790,250806,611629,218106,958547,420957,569930,84895,578976,826208,413101,221360,93449,473174,151486,473246,123150,114477,719630,490499,794279,615323,449670,263386,956463,284471,466797,234980,378458,502894,3341,896726,912912,924808,870506,977973,855737,921008,369630,281906,63548,567327,145012,768283,22988,205278,498418,526655,499162,582000,515593,537431,180998,98251,826914,204386,223036,519579,547666,116887,421057,354729,916856,734387,60459,502391,9194,951183,31508,414452,685688,116466,24006,958818,893314,409503,794654,538640,525168,139579,366142,535598,76296,113014,221191,953373,951865,821701,583682,998656,433490,229512,370022,983158,511641,104336,182457,19411,458250,158618,985838,988044,615888,101988,685290,609215,22934,50967,836785,368173,600621,229490,168701,521790,708472,338908,663950,871244,887502,708305,552437,372815,191821,752527,296745,847772,439295,721393,8447,658936,114203,94116,478634,839634,19226,732470,954585,447939,393800,456917,550828,787878,505330,155638,389005,813719,855559,637707,244971,281544,727767,649089,841441,422006,498290,727552,76803,427745,589789,991276,492751,211108,238910,691465,639511,375132,600308,950737,606137,232957,530833,708396,706889,159737,454765,40679,719757,187518,461393,170195,837159,268832,268694,334066,282062,285743,806861,166124,68748,543274,951870,648434,976422,540795,274727,205065,582541,85881,560957,800718,407093,192819,920919,747235,589797,845817,797793,474966,573265,502191,885893,260989,431295,831800,776284,212798,963183,719435,784929,30483,258045,136931,434870,181757,276696,179200,889029,273940,710041,900247,20694,845827,434662,719898,149742,910331,999927,591891,183636,565265,21002,654103,152574,148957,948494,372494,942137,604032,453845,716320,485870,598188,878564,829873,865444,508363,362075,420019,992578,879776,625349,84003,304192,488539,594976,581984,218090,565715,59900,548252,241909,854144,453034,237424,695647,210169,685696,677050,9253,510415,758356,869252,822280,470201,197899,603776,852007,43509,41940,733203,14678,590960,376735,574194,36550,718385,39921,875662,64525,80356,694147,895543,728730,884000,870395,881194,755227,521049,18335,860132,681461,216514,571029,808886,441811,764160,165814,640225,908975,309154,274728,247403,720357,65559,33136,923851,265179,459805,484975,777745,803086,154713,853489,705851,616044,555412,453253,867406,630442,761526,431331,829819,96507,295437,689404,822899,639083,515020,825728,558548,703736,339689,227229,481549,328769,625293,441592,531055,123682,807108,816730,31647,647603,138281,531410,680303,982170,555657,279803,658831,646151,558437,624307,629879,859018,438261,382092,612532,773533,793995,255190,743403,343484,991240,739774,913008,861651,86707,135866,433288,380665,323852,42258,161745,237319,61867,895173,32313,851347,185871,253751,802676,886753,19194,224021,20748,150109,650317,4082,731394,29276,154764,127224,582300,587932,55924,385046,466237,670065,986689,760924,618874,188744,729844,243123,734151,304832,958388,371517,729573,467908,704810,726982,801626,970939,629407,294621,942607,952768,947105,222335,191028,217789,32338,334965,964840,995272,322939,855046,502126,509784,630018,835276,828959,986383,25551,539773,835180,230710,49564,867308,258407,177603,918254,463744,638333,543332,677681,149978,55991,929934,487314,381443,703826,826800,530014,985990,139710,751495,211068,221373,649580,297006,273381,186865,919291,972981,980642,543936,761766,551920,754486,973519,20501,881656,73427,781497,535407,976493,794391,623800,311099,686251,383855,684188,738705,249865,788700,273895,837006,747740,300332,826352,14550,713004,976528,432175,952452,685600,827425,979046,891675,575265,624935,739561];

const bigThreshold = 4997;

// console.log(Math.max(...bigArray), Math.floor(Math.max(...bigArray)/2))

// function smallestDivisor(nums, threshold) {
//   let divisor = 1;
//   let outcome = threshold + 1;

//   while(outcome > threshold) {
//     outcome = nums.reduce((sum, num) => {
//       sum += Math.ceil(num/divisor);
//       return sum;
//     }, 0)

//     if(outcome > threshold) divisor += Math.floor(outcome/threshold);
//   }

//   return divisor;
// }

console.log(smallestDivisor([1,2,5,9], 6));
console.log(smallestDivisor([2,3,5,7,11], 11));
console.log(smallestDivisor([19], 5));
